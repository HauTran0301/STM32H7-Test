
stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004330  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800463c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000208  24000010  0800464c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000218  0800464c  00020218  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c576  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000018a5  00000000  00000000  0002c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a60  00000000  00000000  0002dea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007da  00000000  00000000  0002e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035933  00000000  00000000  0002f0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ba65  00000000  00000000  00064a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001587d6  00000000  00000000  00070472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002b4c  00000000  00000000  001c8c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005a  00000000  00000000  001cb794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080045b0 	.word	0x080045b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080045b0 	.word	0x080045b0

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 fca7 	bl	8000c30 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002e2:	f000 fa85 	bl	80007f0 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f8d9 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 fa1d 	bl	8000728 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80002ee:	f000 f9b7 	bl	8000660 <MX_FDCAN2_Init>
  MX_FDCAN1_Init();
 80002f2:	f000 f951 	bl	8000598 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_RCC_FDCAN_CLK_ENABLE();
 80002f6:	4b62      	ldr	r3, [pc, #392]	; (8000480 <main+0x1a8>)
 80002f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80002fc:	4a60      	ldr	r2, [pc, #384]	; (8000480 <main+0x1a8>)
 80002fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000302:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000306:	4b5e      	ldr	r3, [pc, #376]	; (8000480 <main+0x1a8>)
 8000308:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800030c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
//                        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
//                        sFilterConfig.FilterID1 = ((0xE0<<3)+0x01)<<5;;
//                        sFilterConfig.FilterID2 = 0X7FF; /* For acceptance, MessageID and FilterID1 must match exactly */
//                        HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);

                        sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000314:	4b5b      	ldr	r3, [pc, #364]	; (8000484 <main+0x1ac>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
                        sFilterConfig.FilterIndex = 1;
 800031a:	4b5a      	ldr	r3, [pc, #360]	; (8000484 <main+0x1ac>)
 800031c:	2201      	movs	r2, #1
 800031e:	605a      	str	r2, [r3, #4]
                        sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000320:	4b58      	ldr	r3, [pc, #352]	; (8000484 <main+0x1ac>)
 8000322:	2202      	movs	r2, #2
 8000324:	609a      	str	r2, [r3, #8]
                        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000326:	4b57      	ldr	r3, [pc, #348]	; (8000484 <main+0x1ac>)
 8000328:	2201      	movs	r2, #1
 800032a:	60da      	str	r2, [r3, #12]
                        sFilterConfig.FilterID1 = 0x80<<8;
 800032c:	4b55      	ldr	r3, [pc, #340]	; (8000484 <main+0x1ac>)
 800032e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000332:	611a      	str	r2, [r3, #16]
                        sFilterConfig.FilterID2 = 0X7FF; /* For acceptance, MessageID and FilterID1 must match exactly */
 8000334:	4b53      	ldr	r3, [pc, #332]	; (8000484 <main+0x1ac>)
 8000336:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800033a:	615a      	str	r2, [r3, #20]
                        HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800033c:	4951      	ldr	r1, [pc, #324]	; (8000484 <main+0x1ac>)
 800033e:	4852      	ldr	r0, [pc, #328]	; (8000488 <main+0x1b0>)
 8000340:	f001 f84e 	bl	80013e0 <HAL_FDCAN_ConfigFilter>

                        sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000344:	4b4f      	ldr	r3, [pc, #316]	; (8000484 <main+0x1ac>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
                        sFilterConfig.FilterIndex = 2;
 800034a:	4b4e      	ldr	r3, [pc, #312]	; (8000484 <main+0x1ac>)
 800034c:	2202      	movs	r2, #2
 800034e:	605a      	str	r2, [r3, #4]
                        sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000350:	4b4c      	ldr	r3, [pc, #304]	; (8000484 <main+0x1ac>)
 8000352:	2202      	movs	r2, #2
 8000354:	609a      	str	r2, [r3, #8]
//                        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
                        sFilterConfig.FilterID1 = ((0xC0 | (0x10 >> 3)) << 8) + (0x10 <<5);
 8000356:	4b4b      	ldr	r3, [pc, #300]	; (8000484 <main+0x1ac>)
 8000358:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 800035c:	611a      	str	r2, [r3, #16]
                        sFilterConfig.FilterID2 = 0X7FF; /* For acceptance, MessageID and FilterID1 must match exactly */
 800035e:	4b49      	ldr	r3, [pc, #292]	; (8000484 <main+0x1ac>)
 8000360:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000364:	615a      	str	r2, [r3, #20]
                        HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000366:	4947      	ldr	r1, [pc, #284]	; (8000484 <main+0x1ac>)
 8000368:	4847      	ldr	r0, [pc, #284]	; (8000488 <main+0x1b0>)
 800036a:	f001 f839 	bl	80013e0 <HAL_FDCAN_ConfigFilter>

                        sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800036e:	4b45      	ldr	r3, [pc, #276]	; (8000484 <main+0x1ac>)
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
                        sFilterConfig.FilterIndex = 3;
 8000374:	4b43      	ldr	r3, [pc, #268]	; (8000484 <main+0x1ac>)
 8000376:	2203      	movs	r2, #3
 8000378:	605a      	str	r2, [r3, #4]
                        sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800037a:	4b42      	ldr	r3, [pc, #264]	; (8000484 <main+0x1ac>)
 800037c:	2202      	movs	r2, #2
 800037e:	609a      	str	r2, [r3, #8]
//                        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
                        sFilterConfig.FilterID1 =  0x00 << 8;
 8000380:	4b40      	ldr	r3, [pc, #256]	; (8000484 <main+0x1ac>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
                        sFilterConfig.FilterID2 = 0X7FF; /* For acceptance, MessageID and FilterID1 must match exactly */
 8000386:	4b3f      	ldr	r3, [pc, #252]	; (8000484 <main+0x1ac>)
 8000388:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800038c:	615a      	str	r2, [r3, #20]
                        HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800038e:	493d      	ldr	r1, [pc, #244]	; (8000484 <main+0x1ac>)
 8000390:	483d      	ldr	r0, [pc, #244]	; (8000488 <main+0x1b0>)
 8000392:	f001 f825 	bl	80013e0 <HAL_FDCAN_ConfigFilter>

                        sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000396:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <main+0x1ac>)
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
                        sFilterConfig.FilterIndex = 4;
 800039c:	4b39      	ldr	r3, [pc, #228]	; (8000484 <main+0x1ac>)
 800039e:	2204      	movs	r2, #4
 80003a0:	605a      	str	r2, [r3, #4]
                        sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80003a2:	4b38      	ldr	r3, [pc, #224]	; (8000484 <main+0x1ac>)
 80003a4:	2202      	movs	r2, #2
 80003a6:	609a      	str	r2, [r3, #8]
//                        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
                        sFilterConfig.FilterID1 = (0xA0 << 8) +(0x0B << 5);
 80003a8:	4b36      	ldr	r3, [pc, #216]	; (8000484 <main+0x1ac>)
 80003aa:	f24a 1260 	movw	r2, #41312	; 0xa160
 80003ae:	611a      	str	r2, [r3, #16]
                        sFilterConfig.FilterID2 = 0X7FF; /* For acceptance, MessageID and FilterID1 must match exactly */
 80003b0:	4b34      	ldr	r3, [pc, #208]	; (8000484 <main+0x1ac>)
 80003b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80003b6:	615a      	str	r2, [r3, #20]
                        HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 80003b8:	4932      	ldr	r1, [pc, #200]	; (8000484 <main+0x1ac>)
 80003ba:	4833      	ldr	r0, [pc, #204]	; (8000488 <main+0x1b0>)
 80003bc:	f001 f810 	bl	80013e0 <HAL_FDCAN_ConfigFilter>

                        sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80003c0:	4b30      	ldr	r3, [pc, #192]	; (8000484 <main+0x1ac>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
                        sFilterConfig.FilterIndex = 5;
 80003c6:	4b2f      	ldr	r3, [pc, #188]	; (8000484 <main+0x1ac>)
 80003c8:	2205      	movs	r2, #5
 80003ca:	605a      	str	r2, [r3, #4]
                        sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80003cc:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <main+0x1ac>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	609a      	str	r2, [r3, #8]
//                        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
                        sFilterConfig.FilterID1 = 0xD0 << 8;
 80003d2:	4b2c      	ldr	r3, [pc, #176]	; (8000484 <main+0x1ac>)
 80003d4:	f44f 4250 	mov.w	r2, #53248	; 0xd000
 80003d8:	611a      	str	r2, [r3, #16]
                        sFilterConfig.FilterID2 = 0X7FF; /* For acceptance, MessageID and FilterID1 must match exactly */
 80003da:	4b2a      	ldr	r3, [pc, #168]	; (8000484 <main+0x1ac>)
 80003dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80003e0:	615a      	str	r2, [r3, #20]
                        HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 80003e2:	4928      	ldr	r1, [pc, #160]	; (8000484 <main+0x1ac>)
 80003e4:	4828      	ldr	r0, [pc, #160]	; (8000488 <main+0x1b0>)
 80003e6:	f000 fffb 	bl	80013e0 <HAL_FDCAN_ConfigFilter>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80003ea:	4827      	ldr	r0, [pc, #156]	; (8000488 <main+0x1b0>)
 80003ec:	f001 f86e 	bl	80014cc <HAL_FDCAN_Start>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d002      	beq.n	80003fc <main+0x124>
    /* Start Error */
    Error_Handler();
 80003f6:	f000 fa27 	bl	8000848 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) < 2) {}
 80003fa:	bf00      	nop
 80003fc:	bf00      	nop
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	4821      	ldr	r0, [pc, #132]	; (8000488 <main+0x1b0>)
 8000402:	f001 f9fb 	bl	80017fc <HAL_FDCAN_GetRxFifoFillLevel>
 8000406:	4603      	mov	r3, r0
 8000408:	2b01      	cmp	r3, #1
 800040a:	d9f8      	bls.n	80003fe <main+0x126>
	  	  if(to == 9)
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <main+0x1b4>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d102      	bne.n	800041a <main+0x142>
	  	  {
	  		  to = 0;
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <main+0x1b4>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	  	  }
	      HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <main+0x1b8>)
 800041c:	4a1d      	ldr	r2, [pc, #116]	; (8000494 <main+0x1bc>)
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	4819      	ldr	r0, [pc, #100]	; (8000488 <main+0x1b0>)
 8000422:	f001 f87f 	bl	8001524 <HAL_FDCAN_GetRxMessage>
	      view_data[to][0] 	= (RxHeader.Identifier>>3) & 0xF0;
 8000426:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <main+0x1bc>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	08db      	lsrs	r3, r3, #3
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4a17      	ldr	r2, [pc, #92]	; (800048c <main+0x1b4>)
 8000430:	7812      	ldrb	r2, [r2, #0]
 8000432:	f023 030f 	bic.w	r3, r3, #15
 8000436:	b2d9      	uxtb	r1, r3
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <main+0x1c0>)
 800043a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
	      view_data[to][1] 	= RxHeader.Identifier & 0x3F;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <main+0x1bc>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4a11      	ldr	r2, [pc, #68]	; (800048c <main+0x1b4>)
 8000446:	7812      	ldrb	r2, [r2, #0]
 8000448:	4610      	mov	r0, r2
 800044a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800044e:	b2d9      	uxtb	r1, r3
 8000450:	4a11      	ldr	r2, [pc, #68]	; (8000498 <main+0x1c0>)
 8000452:	00c3      	lsls	r3, r0, #3
 8000454:	4413      	add	r3, r2
 8000456:	460a      	mov	r2, r1
 8000458:	705a      	strb	r2, [r3, #1]
	      memcpy((void *)&view_data[to][2],RxData,RxHeader.DataLength);
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <main+0x1b4>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	3302      	adds	r3, #2
 8000462:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <main+0x1c0>)
 8000464:	4413      	add	r3, r2
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <main+0x1bc>)
 8000468:	68d2      	ldr	r2, [r2, #12]
 800046a:	4909      	ldr	r1, [pc, #36]	; (8000490 <main+0x1b8>)
 800046c:	4618      	mov	r0, r3
 800046e:	f004 f891 	bl	8004594 <memcpy>
	      to++;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <main+0x1b4>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3301      	adds	r3, #1
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b04      	ldr	r3, [pc, #16]	; (800048c <main+0x1b4>)
 800047c:	701a      	strb	r2, [r3, #0]
	  while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) < 2) {}
 800047e:	e7bd      	b.n	80003fc <main+0x124>
 8000480:	58024400 	.word	0x58024400
 8000484:	2400016c 	.word	0x2400016c
 8000488:	2400002c 	.word	0x2400002c
 800048c:	2400020c 	.word	0x2400020c
 8000490:	240001b4 	.word	0x240001b4
 8000494:	2400018c 	.word	0x2400018c
 8000498:	240001bc 	.word	0x240001bc

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b09c      	sub	sp, #112	; 0x70
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a6:	224c      	movs	r2, #76	; 0x4c
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f004 f846 	bl	800453c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2220      	movs	r2, #32
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f004 f840 	bl	800453c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004bc:	2002      	movs	r0, #2
 80004be:	f001 fd0b 	bl	8001ed8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004c2:	2300      	movs	r3, #0
 80004c4:	603b      	str	r3, [r7, #0]
 80004c6:	4b32      	ldr	r3, [pc, #200]	; (8000590 <SystemClock_Config+0xf4>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	4a31      	ldr	r2, [pc, #196]	; (8000590 <SystemClock_Config+0xf4>)
 80004cc:	f023 0301 	bic.w	r3, r3, #1
 80004d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004d2:	4b2f      	ldr	r3, [pc, #188]	; (8000590 <SystemClock_Config+0xf4>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <SystemClock_Config+0xf8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004e4:	4a2b      	ldr	r2, [pc, #172]	; (8000594 <SystemClock_Config+0xf8>)
 80004e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b29      	ldr	r3, [pc, #164]	; (8000594 <SystemClock_Config+0xf8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004f8:	bf00      	nop
 80004fa:	4b26      	ldr	r3, [pc, #152]	; (8000594 <SystemClock_Config+0xf8>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000506:	d1f8      	bne.n	80004fa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000508:	2302      	movs	r3, #2
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800050c:	2301      	movs	r3, #1
 800050e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000510:	2340      	movs	r3, #64	; 0x40
 8000512:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000514:	2302      	movs	r3, #2
 8000516:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000518:	2300      	movs	r3, #0
 800051a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800051c:	2304      	movs	r3, #4
 800051e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000520:	2309      	movs	r3, #9
 8000522:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000524:	2302      	movs	r3, #2
 8000526:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000528:	2303      	movs	r3, #3
 800052a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800052c:	2302      	movs	r3, #2
 800052e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000530:	230c      	movs	r3, #12
 8000532:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000534:	2302      	movs	r3, #2
 8000536:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800053c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fd02 	bl	8001f4c <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800054e:	f000 f97b 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	233f      	movs	r3, #63	; 0x3f
 8000554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2101      	movs	r1, #1
 8000576:	4618      	mov	r0, r3
 8000578:	f002 f942 	bl	8002800 <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000582:	f000 f961 	bl	8000848 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3770      	adds	r7, #112	; 0x70
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	58000400 	.word	0x58000400
 8000594:	58024800 	.word	0x58024800

08000598 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800059c:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800059e:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_FDCAN1_Init+0xc4>)
 80005a0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005a8:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80005ba:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005bc:	2201      	movs	r2, #1
 80005be:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005c2:	2214      	movs	r2, #20
 80005c4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80005c6:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 17;
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005ce:	2211      	movs	r2, #17
 80005d0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005d4:	2202      	movs	r2, #2
 80005d6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005da:	2214      	movs	r2, #20
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 17;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005e6:	2211      	movs	r2, #17
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 5;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005f8:	2205      	movs	r2, #5
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 2;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000604:	2202      	movs	r2, #2
 8000606:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800060a:	2204      	movs	r2, #4
 800060c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 2;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000610:	2202      	movs	r2, #2
 8000612:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000616:	2204      	movs	r2, #4
 8000618:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800061c:	2200      	movs	r2, #0
 800061e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000622:	2204      	movs	r2, #4
 8000624:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000628:	2200      	movs	r2, #0
 800062a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800062e:	2200      	movs	r2, #0
 8000630:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000634:	2200      	movs	r2, #0
 8000636:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000640:	2204      	movs	r2, #4
 8000642:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000646:	f000 fced 	bl	8001024 <HAL_FDCAN_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000650:	f000 f8fa 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2400002c 	.word	0x2400002c
 800065c:	4000a000 	.word	0x4000a000

08000660 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 8000666:	4a2f      	ldr	r2, [pc, #188]	; (8000724 <MX_FDCAN2_Init+0xc4>)
 8000668:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 8000678:	2200      	movs	r2, #0
 800067a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 8000684:	2200      	movs	r2, #0
 8000686:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 800068a:	2210      	movs	r2, #16
 800068c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 8000690:	2201      	movs	r2, #1
 8000692:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 8000696:	2202      	movs	r2, #2
 8000698:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 800069c:	2202      	movs	r2, #2
 800069e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006de:	2204      	movs	r2, #4
 80006e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 8000708:	2204      	movs	r2, #4
 800070a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_FDCAN2_Init+0xc0>)
 800070e:	f000 fc89 	bl	8001024 <HAL_FDCAN_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000718:	f000 f896 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	240000cc 	.word	0x240000cc
 8000724:	4000a400 	.word	0x4000a400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_GPIO_Init+0xc0>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a28      	ldr	r2, [pc, #160]	; (80007e8 <MX_GPIO_Init+0xc0>)
 8000746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xc0>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_GPIO_Init+0xc0>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000762:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_GPIO_Init+0xc0>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_GPIO_Init+0xc0>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_GPIO_Init+0xc0>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <MX_GPIO_Init+0xc0>)
 8000782:	f043 0302 	orr.w	r3, r3, #2
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_GPIO_Init+0xc0>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	f003 0302 	and.w	r3, r3, #2
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_GPIO_Init+0xc0>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_GPIO_Init+0xc0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_GPIO_Init+0xc0>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0xc4>)
 80007be:	f001 fb71 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0xc4>)
 80007dc:	f001 f9b2 	bl	8001b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58020400 	.word	0x58020400

080007f0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000802:	f000 fb97 	bl	8000f34 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000806:	2301      	movs	r3, #1
 8000808:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800080a:	2300      	movs	r3, #0
 800080c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000812:	231f      	movs	r3, #31
 8000814:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000816:	2387      	movs	r3, #135	; 0x87
 8000818:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800081a:	2300      	movs	r3, #0
 800081c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800081e:	2300      	movs	r3, #0
 8000820:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000822:	2301      	movs	r3, #1
 8000824:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000826:	2301      	movs	r3, #1
 8000828:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fbb5 	bl	8000fa4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800083a:	2004      	movs	r0, #4
 800083c:	f000 fb92 	bl	8000f64 <HAL_MPU_Enable>

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_MspInit+0x30>)
 800085c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x30>)
 8000862:	f043 0302 	orr.w	r3, r3, #2
 8000866:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x30>)
 800086c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	58024400 	.word	0x58024400

08000888 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0be      	sub	sp, #248	; 0xf8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	22c0      	movs	r2, #192	; 0xc0
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 fe47 	bl	800453c <memset>
  if(hfdcan->Instance==FDCAN1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a6a      	ldr	r2, [pc, #424]	; (8000a5c <HAL_FDCAN_MspInit+0x1d4>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d176      	bne.n	80009a6 <HAL_FDCAN_MspInit+0x11e>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008bc:	f04f 0300 	mov.w	r3, #0
 80008c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80008c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fac5 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80008dc:	f7ff ffb4 	bl	8000848 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80008e0:	4b5f      	ldr	r3, [pc, #380]	; (8000a60 <HAL_FDCAN_MspInit+0x1d8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a5e      	ldr	r2, [pc, #376]	; (8000a60 <HAL_FDCAN_MspInit+0x1d8>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80008ea:	4b5d      	ldr	r3, [pc, #372]	; (8000a60 <HAL_FDCAN_MspInit+0x1d8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10e      	bne.n	8000910 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80008f2:	4b5c      	ldr	r3, [pc, #368]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 80008f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008f8:	4a5a      	ldr	r2, [pc, #360]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000902:	4b58      	ldr	r3, [pc, #352]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000904:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800090c:	61fb      	str	r3, [r7, #28]
 800090e:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000910:	4b54      	ldr	r3, [pc, #336]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	4a53      	ldr	r2, [pc, #332]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000920:	4b50      	ldr	r3, [pc, #320]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b4d      	ldr	r3, [pc, #308]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	4a4b      	ldr	r2, [pc, #300]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093e:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PI9     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800094c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000950:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000966:	2309      	movs	r3, #9
 8000968:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800096c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000970:	4619      	mov	r1, r3
 8000972:	483d      	ldr	r0, [pc, #244]	; (8000a68 <HAL_FDCAN_MspInit+0x1e0>)
 8000974:	f001 f8e6 	bl	8001b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000992:	2309      	movs	r3, #9
 8000994:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800099c:	4619      	mov	r1, r3
 800099e:	4833      	ldr	r0, [pc, #204]	; (8000a6c <HAL_FDCAN_MspInit+0x1e4>)
 80009a0:	f001 f8d0 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80009a4:	e055      	b.n	8000a52 <HAL_FDCAN_MspInit+0x1ca>
  else if(hfdcan->Instance==FDCAN2)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <HAL_FDCAN_MspInit+0x1e8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d150      	bne.n	8000a52 <HAL_FDCAN_MspInit+0x1ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009b4:	f04f 0300 	mov.w	r3, #0
 80009b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80009bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fa49 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_FDCAN_MspInit+0x150>
      Error_Handler();
 80009d4:	f7ff ff38 	bl	8000848 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <HAL_FDCAN_MspInit+0x1d8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <HAL_FDCAN_MspInit+0x1d8>)
 80009e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <HAL_FDCAN_MspInit+0x1d8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d10e      	bne.n	8000a08 <HAL_FDCAN_MspInit+0x180>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 80009ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80009f0:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 80009fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_FDCAN_MspInit+0x1dc>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000a40:	2309      	movs	r3, #9
 8000a42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_FDCAN_MspInit+0x1ec>)
 8000a4e:	f001 f879 	bl	8001b44 <HAL_GPIO_Init>
}
 8000a52:	bf00      	nop
 8000a54:	37f8      	adds	r7, #248	; 0xf8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	4000a000 	.word	0x4000a000
 8000a60:	24000210 	.word	0x24000210
 8000a64:	58024400 	.word	0x58024400
 8000a68:	58022000 	.word	0x58022000
 8000a6c:	58020000 	.word	0x58020000
 8000a70:	4000a400 	.word	0x4000a400
 8000a74:	58020400 	.word	0x58020400

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f926 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <SystemInit+0xe4>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a36      	ldr	r2, [pc, #216]	; (8000bb0 <SystemInit+0xe4>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae0:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <SystemInit+0xe8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	2b06      	cmp	r3, #6
 8000aea:	d807      	bhi.n	8000afc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aec:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <SystemInit+0xe8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f023 030f 	bic.w	r3, r3, #15
 8000af4:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <SystemInit+0xe8>)
 8000af6:	f043 0307 	orr.w	r3, r3, #7
 8000afa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <SystemInit+0xec>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a2d      	ldr	r2, [pc, #180]	; (8000bb8 <SystemInit+0xec>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b08:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <SystemInit+0xec>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <SystemInit+0xec>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4929      	ldr	r1, [pc, #164]	; (8000bb8 <SystemInit+0xec>)
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <SystemInit+0xf0>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <SystemInit+0xe8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d007      	beq.n	8000b36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <SystemInit+0xe8>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f023 030f 	bic.w	r3, r3, #15
 8000b2e:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <SystemInit+0xe8>)
 8000b30:	f043 0307 	orr.w	r3, r3, #7
 8000b34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <SystemInit+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <SystemInit+0xec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <SystemInit+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <SystemInit+0xec>)
 8000b4a:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <SystemInit+0xf4>)
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <SystemInit+0xec>)
 8000b50:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <SystemInit+0xf8>)
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <SystemInit+0xec>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <SystemInit+0xfc>)
 8000b58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <SystemInit+0xec>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <SystemInit+0xec>)
 8000b62:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <SystemInit+0xfc>)
 8000b64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <SystemInit+0xec>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <SystemInit+0xec>)
 8000b6e:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <SystemInit+0xfc>)
 8000b70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <SystemInit+0xec>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <SystemInit+0xec>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <SystemInit+0xec>)
 8000b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <SystemInit+0xec>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <SystemInit+0x100>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <SystemInit+0x104>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b96:	d202      	bcs.n	8000b9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <SystemInit+0x108>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <SystemInit+0x10c>)
 8000ba0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ba4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00
 8000bb4:	52002000 	.word	0x52002000
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bc0:	02020200 	.word	0x02020200
 8000bc4:	01ff0000 	.word	0x01ff0000
 8000bc8:	01010280 	.word	0x01010280
 8000bcc:	5c001000 	.word	0x5c001000
 8000bd0:	ffff0000 	.word	0xffff0000
 8000bd4:	51008108 	.word	0x51008108
 8000bd8:	52004000 	.word	0x52004000

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be0:	f7ff ff74 	bl	8000acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f003 fc9f 	bl	800454c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fb63 	bl	80002d8 <main>
  bx  lr
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c1c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c20:	0800463c 	.word	0x0800463c
  ldr r2, =_sbss
 8000c24:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c28:	24000218 	.word	0x24000218

08000c2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC3_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 f94a 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c3c:	f001 ff96 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8000c40:	4602      	mov	r2, r0
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_Init+0x68>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	4913      	ldr	r1, [pc, #76]	; (8000c9c <HAL_Init+0x6c>)
 8000c4e:	5ccb      	ldrb	r3, [r1, r3]
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	fa22 f303 	lsr.w	r3, r2, r3
 8000c58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_Init+0x68>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_Init+0x6c>)
 8000c64:	5cd3      	ldrb	r3, [r2, r3]
 8000c66:	f003 031f 	and.w	r3, r3, #31
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_Init+0x70>)
 8000c72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <HAL_Init+0x74>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f000 f814 	bl	8000ca8 <HAL_InitTick>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e002      	b.n	8000c90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8a:	f7ff fde3 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	08004614 	.word	0x08004614
 8000ca0:	24000004 	.word	0x24000004
 8000ca4:	24000000 	.word	0x24000000

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_InitTick+0x60>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e021      	b.n	8000d00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_InitTick+0x64>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_InitTick+0x60>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f921 	bl	8000f1a <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f8f9 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x68>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2400000c 	.word	0x2400000c
 8000d0c:	24000000 	.word	0x24000000
 8000d10:	24000008 	.word	0x24000008

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	2400000c 	.word	0x2400000c
 8000d38:	24000214 	.word	0x24000214

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	24000214 	.word	0x24000214

08000d54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetREVID+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	0c1b      	lsrs	r3, r3, #16
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	5c001000 	.word	0x5c001000

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <__NVIC_SetPriorityGrouping+0x40>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x40>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	05fa0000 	.word	0x05fa0000

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff47 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff5e 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff90 	bl	8000e24 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5f 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffb2 	bl	8000e8c <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f38:	f3bf 8f5f 	dmb	sy
}
 8000f3c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_MPU_Disable+0x28>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_MPU_Disable+0x28>)
 8000f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f48:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_MPU_Disable+0x2c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00
 8000f60:	e000ed90 	.word	0xe000ed90

08000f64 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_MPU_Enable+0x38>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_MPU_Enable+0x3c>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <HAL_MPU_Enable+0x3c>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f80:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed90 	.word	0xe000ed90
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	785a      	ldrb	r2, [r3, #1]
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_MPU_ConfigRegion+0x7c>)
 8000fb2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_MPU_ConfigRegion+0x7c>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_MPU_ConfigRegion+0x7c>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_MPU_ConfigRegion+0x7c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7b1b      	ldrb	r3, [r3, #12]
 8000fcc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7adb      	ldrb	r3, [r3, #11]
 8000fd2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7a9b      	ldrb	r3, [r3, #10]
 8000fda:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7b5b      	ldrb	r3, [r3, #13]
 8000fe2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7b9b      	ldrb	r3, [r3, #14]
 8000fea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7bdb      	ldrb	r3, [r3, #15]
 8000ff2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7a5b      	ldrb	r3, [r3, #9]
 8000ffa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ffc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7a1b      	ldrb	r3, [r3, #8]
 8001002:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001004:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800100e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001010:	6113      	str	r3, [r2, #16]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed90 	.word	0xe000ed90

08001024 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b098      	sub	sp, #96	; 0x60
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800102c:	4a84      	ldr	r2, [pc, #528]	; (8001240 <HAL_FDCAN_Init+0x21c>)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4611      	mov	r1, r2
 8001034:	224c      	movs	r2, #76	; 0x4c
 8001036:	4618      	mov	r0, r3
 8001038:	f003 faac 	bl	8004594 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e1c6      	b.n	80013d4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a7e      	ldr	r2, [pc, #504]	; (8001244 <HAL_FDCAN_Init+0x220>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d106      	bne.n	800105e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d106      	bne.n	8001078 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fc08 	bl	8000888 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0210 	bic.w	r2, r2, #16
 8001086:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001088:	f7ff fe58 	bl	8000d3c <HAL_GetTick>
 800108c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800108e:	e014      	b.n	80010ba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001090:	f7ff fe54 	bl	8000d3c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b0a      	cmp	r3, #10
 800109c:	d90d      	bls.n	80010ba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e18c      	b.n	80013d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d0e3      	beq.n	8001090 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	699a      	ldr	r2, [r3, #24]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d8:	f7ff fe30 	bl	8000d3c <HAL_GetTick>
 80010dc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010de:	e014      	b.n	800110a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010e0:	f7ff fe2c 	bl	8000d3c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b0a      	cmp	r3, #10
 80010ec:	d90d      	bls.n	800110a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e164      	b.n	80013d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0e3      	beq.n	80010e0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0202 	orr.w	r2, r2, #2
 8001126:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7c1b      	ldrb	r3, [r3, #16]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d108      	bne.n	8001142 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	699a      	ldr	r2, [r3, #24]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	e007      	b.n	8001152 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699a      	ldr	r2, [r3, #24]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001150:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7c5b      	ldrb	r3, [r3, #17]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d108      	bne.n	800116c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699a      	ldr	r2, [r3, #24]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001168:	619a      	str	r2, [r3, #24]
 800116a:	e007      	b.n	800117c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800117a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c9b      	ldrb	r3, [r3, #18]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d108      	bne.n	8001196 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	e007      	b.n	80011a6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011a4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80011ca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0210 	bic.w	r2, r2, #16
 80011da:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0204 	orr.w	r2, r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
 80011f4:	e030      	b.n	8001258 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d02c      	beq.n	8001258 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d020      	beq.n	8001248 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001214:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0210 	orr.w	r2, r2, #16
 8001224:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d114      	bne.n	8001258 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699a      	ldr	r2, [r3, #24]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0220 	orr.w	r2, r2, #32
 800123c:	619a      	str	r2, [r3, #24]
 800123e:	e00b      	b.n	8001258 <HAL_FDCAN_Init+0x234>
 8001240:	080045c8 	.word	0x080045c8
 8001244:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0220 	orr.w	r2, r2, #32
 8001256:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	3b01      	subs	r3, #1
 800125e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	3b01      	subs	r3, #1
 8001266:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001268:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001270:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	3b01      	subs	r3, #1
 800127a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001280:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001282:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800128c:	d115      	bne.n	80012ba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	3b01      	subs	r3, #1
 800129a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800129c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	3b01      	subs	r3, #1
 80012a4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012a6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	3b01      	subs	r3, #1
 80012b0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012b6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012b8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00a      	beq.n	80012d8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e0:	4413      	add	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d011      	beq.n	800130a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80012ee:	f023 0107 	bic.w	r1, r3, #7
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	3360      	adds	r3, #96	; 0x60
 80012fa:	443b      	add	r3, r7
 80012fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	2b00      	cmp	r3, #0
 8001310:	d011      	beq.n	8001336 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800131a:	f023 0107 	bic.w	r1, r3, #7
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	3360      	adds	r3, #96	; 0x60
 8001326:	443b      	add	r3, r7
 8001328:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133a:	2b00      	cmp	r3, #0
 800133c:	d012      	beq.n	8001364 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001346:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	3360      	adds	r3, #96	; 0x60
 8001352:	443b      	add	r3, r7
 8001354:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001358:	011a      	lsls	r2, r3, #4
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001368:	2b00      	cmp	r3, #0
 800136a:	d012      	beq.n	8001392 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001374:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	3360      	adds	r3, #96	; 0x60
 8001380:	443b      	add	r3, r7
 8001382:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001386:	021a      	lsls	r2, r3, #8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <HAL_FDCAN_Init+0x3b8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d107      	bne.n	80013ac <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f022 0203 	bic.w	r2, r2, #3
 80013aa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fa37 	bl	8001838 <FDCAN_CalcultateRamBlockAddresses>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80013d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3760      	adds	r7, #96	; 0x60
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	4000a000 	.word	0x4000a000

080013e0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013f0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d002      	beq.n	80013fe <HAL_FDCAN_ConfigFilter+0x1e>
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d157      	bne.n	80014ae <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d12b      	bne.n	800145e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b07      	cmp	r3, #7
 800140c:	d10d      	bne.n	800142a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800141a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001420:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001422:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e00e      	b.n	8001448 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001436:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800143e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001444:	4313      	orrs	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e025      	b.n	80014aa <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	075a      	lsls	r2, r3, #29
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b07      	cmp	r3, #7
 8001472:	d103      	bne.n	800147c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	e006      	b.n	800148a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	079a      	lsls	r2, r3, #30
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3304      	adds	r3, #4
 80014a2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e008      	b.n	80014c0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014b4:	f043 0202 	orr.w	r2, r3, #2
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
  }
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	371c      	adds	r7, #28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d111      	bne.n	8001504 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699a      	ldr	r2, [r3, #24]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	e008      	b.n	8001516 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800150a:	f043 0204 	orr.w	r2, r3, #4
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
  }
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001524:	b480      	push	{r7}
 8001526:	b08b      	sub	sp, #44	; 0x2c
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800153c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800153e:	7efb      	ldrb	r3, [r7, #27]
 8001540:	2b02      	cmp	r3, #2
 8001542:	f040 8149 	bne.w	80017d8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b40      	cmp	r3, #64	; 0x40
 800154a:	d14c      	bne.n	80015e6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001554:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001562:	f043 0220 	orr.w	r2, r3, #32
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e13c      	b.n	80017ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800157c:	2b00      	cmp	r3, #0
 800157e:	d109      	bne.n	8001594 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e12a      	b.n	80017ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800159c:	0e1b      	lsrs	r3, r3, #24
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d10a      	bne.n	80015bc <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80015ae:	0fdb      	lsrs	r3, r3, #31
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	69f9      	ldr	r1, [r7, #28]
 80015da:	fb01 f303 	mul.w	r3, r1, r3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
 80015e4:	e068      	b.n	80016b8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b41      	cmp	r3, #65	; 0x41
 80015ea:	d14c      	bne.n	8001686 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001602:	f043 0220 	orr.w	r2, r3, #32
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0ec      	b.n	80017ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0da      	b.n	80017ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800163c:	0e1b      	lsrs	r3, r3, #24
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10a      	bne.n	800165c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800164e:	0fdb      	lsrs	r3, r3, #31
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001658:	2301      	movs	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	69f9      	ldr	r1, [r7, #28]
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
 8001684:	e018      	b.n	80016b8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	429a      	cmp	r2, r3
 800168e:	d309      	bcc.n	80016a4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001696:	f043 0220 	orr.w	r2, r3, #32
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0a2      	b.n	80017ea <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0c9b      	lsrs	r3, r3, #18
 80016d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e005      	b.n	80016e8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3304      	adds	r3, #4
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29a      	uxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	f003 020f 	and.w	r2, r3, #15
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0e1b      	lsrs	r3, r3, #24
 800173c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0fda      	lsrs	r2, r3, #31
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	3304      	adds	r3, #4
 8001752:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
 800175c:	e00a      	b.n	8001774 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	441a      	add	r2, r3
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	440b      	add	r3, r1
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	3301      	adds	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	461a      	mov	r2, r3
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	4293      	cmp	r3, r2
 8001782:	d3ec      	bcc.n	800175e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b40      	cmp	r3, #64	; 0x40
 8001788:	d105      	bne.n	8001796 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001794:	e01e      	b.n	80017d4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b41      	cmp	r3, #65	; 0x41
 800179a:	d105      	bne.n	80017a8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80017a6:	e015      	b.n	80017d4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b1f      	cmp	r3, #31
 80017ac:	d808      	bhi.n	80017c0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2101      	movs	r1, #1
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80017be:	e009      	b.n	80017d4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f003 021f 	and.w	r2, r3, #31
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e008      	b.n	80017ea <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017de:	f043 0208 	orr.w	r2, r3, #8
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
  }
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	372c      	adds	r7, #44	; 0x2c
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	08004624 	.word	0x08004624

080017fc <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b40      	cmp	r3, #64	; 0x40
 800180a:	d107      	bne.n	800181c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e006      	b.n	800182a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001828:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001844:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800184e:	4ba7      	ldr	r3, [pc, #668]	; (8001aec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001850:	4013      	ands	r3, r2
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	0091      	lsls	r1, r2, #2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	430b      	orrs	r3, r1
 800185c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001868:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800188e:	4b97      	ldr	r3, [pc, #604]	; (8001aec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001890:	4013      	ands	r3, r2
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	0091      	lsls	r1, r2, #2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	430b      	orrs	r3, r1
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	041a      	lsls	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80018d0:	4b86      	ldr	r3, [pc, #536]	; (8001aec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	0091      	lsls	r1, r2, #2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	430b      	orrs	r3, r1
 80018de:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80018ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	041a      	lsls	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	4413      	add	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001918:	4b74      	ldr	r3, [pc, #464]	; (8001aec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800191a:	4013      	ands	r3, r2
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	0091      	lsls	r1, r2, #2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	430b      	orrs	r3, r1
 8001926:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001932:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	041a      	lsls	r2, r3, #16
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	4413      	add	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001960:	4b62      	ldr	r3, [pc, #392]	; (8001aec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001962:	4013      	ands	r3, r2
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	0091      	lsls	r1, r2, #2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	430b      	orrs	r3, r1
 800196e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	4413      	add	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800198c:	4b57      	ldr	r3, [pc, #348]	; (8001aec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800198e:	4013      	ands	r3, r2
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	0091      	lsls	r1, r2, #2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	430b      	orrs	r3, r1
 800199a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	041a      	lsls	r2, r3, #16
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	4413      	add	r3, r2
 80019c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	0091      	lsls	r1, r2, #2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	430b      	orrs	r3, r1
 80019dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019e8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a04:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a1c:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001a1e:	4413      	add	r3, r2
 8001a20:	009a      	lsls	r2, r3, #2
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	441a      	add	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	441a      	add	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001a58:	441a      	add	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001a70:	441a      	add	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001a88:	441a      	add	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	441a      	add	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	441a      	add	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001ad4:	441a      	add	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d915      	bls.n	8001b14 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001ae8:	e006      	b.n	8001af8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001aea:	bf00      	nop
 8001aec:	ffff0003 	.word	0xffff0003
 8001af0:	10002b00 	.word	0x10002b00
 8001af4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001afe:	f043 0220 	orr.w	r2, r3, #32
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e010      	b.n	8001b36 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e005      	b.n	8001b28 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3304      	adds	r3, #4
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3f3      	bcc.n	8001b1c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b52:	4b89      	ldr	r3, [pc, #548]	; (8001d78 <HAL_GPIO_Init+0x234>)
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b56:	e194      	b.n	8001e82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8186 	beq.w	8001e7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d005      	beq.n	8001b88 <HAL_GPIO_Init+0x44>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 0201 	and.w	r2, r3, #1
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d017      	beq.n	8001c26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d123      	bne.n	8001c7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	69b9      	ldr	r1, [r7, #24]
 8001c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80e0 	beq.w	8001e7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x238>)
 8001cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc2:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <HAL_GPIO_Init+0x238>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_GPIO_Init+0x238>)
 8001cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cda:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <HAL_GPIO_Init+0x23c>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a20      	ldr	r2, [pc, #128]	; (8001d84 <HAL_GPIO_Init+0x240>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d052      	beq.n	8001dac <HAL_GPIO_Init+0x268>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_GPIO_Init+0x244>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d031      	beq.n	8001d72 <HAL_GPIO_Init+0x22e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_GPIO_Init+0x248>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02b      	beq.n	8001d6e <HAL_GPIO_Init+0x22a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_GPIO_Init+0x24c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x226>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_GPIO_Init+0x250>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x222>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_GPIO_Init+0x254>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x21e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_GPIO_Init+0x258>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x21a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_GPIO_Init+0x25c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x216>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <HAL_GPIO_Init+0x260>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_GPIO_Init+0x264>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x20e>
 8001d4e:	2309      	movs	r3, #9
 8001d50:	e02d      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d52:	230a      	movs	r3, #10
 8001d54:	e02b      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e029      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	e027      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d5e:	2306      	movs	r3, #6
 8001d60:	e025      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e023      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e021      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e01f      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e01d      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e01b      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d76:	bf00      	nop
 8001d78:	58000080 	.word	0x58000080
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	58000400 	.word	0x58000400
 8001d84:	58020000 	.word	0x58020000
 8001d88:	58020400 	.word	0x58020400
 8001d8c:	58020800 	.word	0x58020800
 8001d90:	58020c00 	.word	0x58020c00
 8001d94:	58021000 	.word	0x58021000
 8001d98:	58021400 	.word	0x58021400
 8001d9c:	58021800 	.word	0x58021800
 8001da0:	58021c00 	.word	0x58021c00
 8001da4:	58022000 	.word	0x58022000
 8001da8:	58022400 	.word	0x58022400
 8001dac:	2300      	movs	r3, #0
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dbe:	4938      	ldr	r1, [pc, #224]	; (8001ea0 <HAL_GPIO_Init+0x35c>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f47f ae63 	bne.w	8001b58 <HAL_GPIO_Init+0x14>
  }
}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	3724      	adds	r7, #36	; 0x24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	58000400 	.word	0x58000400

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb4:	787b      	ldrb	r3, [r7, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ec0:	e003      	b.n	8001eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ec2:	887b      	ldrh	r3, [r7, #2]
 8001ec4:	041a      	lsls	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	619a      	str	r2, [r3, #24]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_PWREx_ConfigSupply+0x70>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d00a      	beq.n	8001f02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_PWREx_ConfigSupply+0x70>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e01f      	b.n	8001f3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e01d      	b.n	8001f3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_PWREx_ConfigSupply+0x70>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	490f      	ldr	r1, [pc, #60]	; (8001f48 <HAL_PWREx_ConfigSupply+0x70>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f12:	f7fe ff13 	bl	8000d3c <HAL_GetTick>
 8001f16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f18:	e009      	b.n	8001f2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f1a:	f7fe ff0f 	bl	8000d3c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f28:	d901      	bls.n	8001f2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e007      	b.n	8001f3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_PWREx_ConfigSupply+0x70>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3a:	d1ee      	bne.n	8001f1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	58024800 	.word	0x58024800

08001f4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f000 bc48 	b.w	80027f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8088 	beq.w	800207e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f6e:	4b99      	ldr	r3, [pc, #612]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f78:	4b96      	ldr	r3, [pc, #600]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d007      	beq.n	8001f94 <HAL_RCC_OscConfig+0x48>
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	2b18      	cmp	r3, #24
 8001f88:	d111      	bne.n	8001fae <HAL_RCC_OscConfig+0x62>
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	4b8f      	ldr	r3, [pc, #572]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d06d      	beq.n	800207c <HAL_RCC_OscConfig+0x130>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d169      	bne.n	800207c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f000 bc21 	b.w	80027f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x7a>
 8001fb8:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a85      	ldr	r2, [pc, #532]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e02e      	b.n	8002024 <HAL_RCC_OscConfig+0xd8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x9c>
 8001fce:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a80      	ldr	r2, [pc, #512]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b7e      	ldr	r3, [pc, #504]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7d      	ldr	r2, [pc, #500]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xd8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0xc0>
 8001ff2:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a77      	ldr	r2, [pc, #476]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b75      	ldr	r3, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a74      	ldr	r2, [pc, #464]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xd8>
 800200c:	4b71      	ldr	r3, [pc, #452]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a70      	ldr	r2, [pc, #448]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b6e      	ldr	r3, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6d      	ldr	r2, [pc, #436]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fe86 	bl	8000d3c <HAL_GetTick>
 8002030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7fe fe82 	bl	8000d3c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e3d4      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xe8>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe fe72 	bl	8000d3c <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7fe fe6e 	bl	8000d3c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e3c0      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800206e:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x110>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80ca 	beq.w	8002220 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208c:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002094:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002096:	4b4f      	ldr	r3, [pc, #316]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_RCC_OscConfig+0x166>
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	2b18      	cmp	r3, #24
 80020a6:	d156      	bne.n	8002156 <HAL_RCC_OscConfig+0x20a>
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d151      	bne.n	8002156 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b2:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x17e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e392      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0219 	bic.w	r2, r3, #25
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	493f      	ldr	r1, [pc, #252]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe fe2e 	bl	8000d3c <HAL_GetTick>
 80020e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7fe fe2a 	bl	8000d3c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e37c      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f6:	4b37      	ldr	r3, [pc, #220]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	f7fe fe27 	bl	8000d54 <HAL_GetREVID>
 8002106:	4603      	mov	r3, r0
 8002108:	f241 0203 	movw	r2, #4099	; 0x1003
 800210c:	4293      	cmp	r3, r2
 800210e:	d817      	bhi.n	8002140 <HAL_RCC_OscConfig+0x1f4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d108      	bne.n	800212a <HAL_RCC_OscConfig+0x1de>
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002120:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002126:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002128:	e07a      	b.n	8002220 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	031b      	lsls	r3, r3, #12
 8002138:	4926      	ldr	r1, [pc, #152]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213e:	e06f      	b.n	8002220 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	4921      	ldr	r1, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002154:	e064      	b.n	8002220 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d047      	beq.n	80021ee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0219 	bic.w	r2, r3, #25
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	491a      	ldr	r1, [pc, #104]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fde4 	bl	8000d3c <HAL_GetTick>
 8002174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002178:	f7fe fde0 	bl	8000d3c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e332      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	f7fe fddd 	bl	8000d54 <HAL_GetREVID>
 800219a:	4603      	mov	r3, r0
 800219c:	f241 0203 	movw	r2, #4099	; 0x1003
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d819      	bhi.n	80021d8 <HAL_RCC_OscConfig+0x28c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d108      	bne.n	80021be <HAL_RCC_OscConfig+0x272>
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 80021b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ba:	6053      	str	r3, [r2, #4]
 80021bc:	e030      	b.n	8002220 <HAL_RCC_OscConfig+0x2d4>
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	031b      	lsls	r3, r3, #12
 80021cc:	4901      	ldr	r1, [pc, #4]	; (80021d4 <HAL_RCC_OscConfig+0x288>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
 80021d2:	e025      	b.n	8002220 <HAL_RCC_OscConfig+0x2d4>
 80021d4:	58024400 	.word	0x58024400
 80021d8:	4b9a      	ldr	r3, [pc, #616]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	061b      	lsls	r3, r3, #24
 80021e6:	4997      	ldr	r1, [pc, #604]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e018      	b.n	8002220 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ee:	4b95      	ldr	r3, [pc, #596]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a94      	ldr	r2, [pc, #592]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe fd9f 	bl	8000d3c <HAL_GetTick>
 80021fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002202:	f7fe fd9b 	bl	8000d3c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e2ed      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002214:	4b8b      	ldr	r3, [pc, #556]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a9 	beq.w	8002380 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222e:	4b85      	ldr	r3, [pc, #532]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002236:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002238:	4b82      	ldr	r3, [pc, #520]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d007      	beq.n	8002254 <HAL_RCC_OscConfig+0x308>
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b18      	cmp	r3, #24
 8002248:	d13a      	bne.n	80022c0 <HAL_RCC_OscConfig+0x374>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d135      	bne.n	80022c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002254:	4b7b      	ldr	r3, [pc, #492]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_OscConfig+0x320>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b80      	cmp	r3, #128	; 0x80
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e2c1      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800226c:	f7fe fd72 	bl	8000d54 <HAL_GetREVID>
 8002270:	4603      	mov	r3, r0
 8002272:	f241 0203 	movw	r2, #4099	; 0x1003
 8002276:	4293      	cmp	r3, r2
 8002278:	d817      	bhi.n	80022aa <HAL_RCC_OscConfig+0x35e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	2b20      	cmp	r3, #32
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x348>
 8002282:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800228a:	4a6e      	ldr	r2, [pc, #440]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 800228c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002290:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002292:	e075      	b.n	8002380 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002294:	4b6b      	ldr	r3, [pc, #428]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	069b      	lsls	r3, r3, #26
 80022a2:	4968      	ldr	r1, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022a8:	e06a      	b.n	8002380 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022aa:	4b66      	ldr	r3, [pc, #408]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	061b      	lsls	r3, r3, #24
 80022b8:	4962      	ldr	r1, [pc, #392]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022be:	e05f      	b.n	8002380 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d042      	beq.n	800234e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022c8:	4b5e      	ldr	r3, [pc, #376]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a5d      	ldr	r2, [pc, #372]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80022ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fd32 	bl	8000d3c <HAL_GetTick>
 80022d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80022dc:	f7fe fd2e 	bl	8000d3c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e280      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022ee:	4b55      	ldr	r3, [pc, #340]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022fa:	f7fe fd2b 	bl	8000d54 <HAL_GetREVID>
 80022fe:	4603      	mov	r3, r0
 8002300:	f241 0203 	movw	r2, #4099	; 0x1003
 8002304:	4293      	cmp	r3, r2
 8002306:	d817      	bhi.n	8002338 <HAL_RCC_OscConfig+0x3ec>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	2b20      	cmp	r3, #32
 800230e:	d108      	bne.n	8002322 <HAL_RCC_OscConfig+0x3d6>
 8002310:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002318:	4a4a      	ldr	r2, [pc, #296]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 800231a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800231e:	6053      	str	r3, [r2, #4]
 8002320:	e02e      	b.n	8002380 <HAL_RCC_OscConfig+0x434>
 8002322:	4b48      	ldr	r3, [pc, #288]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	4944      	ldr	r1, [pc, #272]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
 8002336:	e023      	b.n	8002380 <HAL_RCC_OscConfig+0x434>
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	493f      	ldr	r1, [pc, #252]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002348:	4313      	orrs	r3, r2
 800234a:	60cb      	str	r3, [r1, #12]
 800234c:	e018      	b.n	8002380 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a3c      	ldr	r2, [pc, #240]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fcef 	bl	8000d3c <HAL_GetTick>
 800235e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002362:	f7fe fceb 	bl	8000d3c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e23d      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002374:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f0      	bne.n	8002362 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d036      	beq.n	80023fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d019      	beq.n	80023c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002398:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7fe fccc 	bl	8000d3c <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fcc8 	bl	8000d3c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e21a      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80023bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x45c>
 80023c6:	e018      	b.n	80023fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe fcb2 	bl	8000d3c <HAL_GetTick>
 80023d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fcae 	bl	8000d3c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e200      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d039      	beq.n	800247a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01c      	beq.n	8002448 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002418:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800241a:	f7fe fc8f 	bl	8000d3c <HAL_GetTick>
 800241e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002422:	f7fe fc8b 	bl	8000d3c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1dd      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_RCC_OscConfig+0x4f8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x4d6>
 8002440:	e01b      	b.n	800247a <HAL_RCC_OscConfig+0x52e>
 8002442:	bf00      	nop
 8002444:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002448:	4b9b      	ldr	r3, [pc, #620]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a9a      	ldr	r2, [pc, #616]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800244e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002452:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002454:	f7fe fc72 	bl	8000d3c <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800245c:	f7fe fc6e 	bl	8000d3c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1c0      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800246e:	4b92      	ldr	r3, [pc, #584]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8081 	beq.w	800258a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002488:	4b8c      	ldr	r3, [pc, #560]	; (80026bc <HAL_RCC_OscConfig+0x770>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a8b      	ldr	r2, [pc, #556]	; (80026bc <HAL_RCC_OscConfig+0x770>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002494:	f7fe fc52 	bl	8000d3c <HAL_GetTick>
 8002498:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7fe fc4e 	bl	8000d3c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1a0      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ae:	4b83      	ldr	r3, [pc, #524]	; (80026bc <HAL_RCC_OscConfig+0x770>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d106      	bne.n	80024d0 <HAL_RCC_OscConfig+0x584>
 80024c2:	4b7d      	ldr	r3, [pc, #500]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	4a7c      	ldr	r2, [pc, #496]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
 80024ce:	e02d      	b.n	800252c <HAL_RCC_OscConfig+0x5e0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x5a6>
 80024d8:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a76      	ldr	r2, [pc, #472]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	4b74      	ldr	r3, [pc, #464]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a73      	ldr	r2, [pc, #460]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80024ea:	f023 0304 	bic.w	r3, r3, #4
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	e01c      	b.n	800252c <HAL_RCC_OscConfig+0x5e0>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x5c8>
 80024fa:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a6e      	ldr	r2, [pc, #440]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a6b      	ldr	r2, [pc, #428]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0x5e0>
 8002514:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a67      	ldr	r2, [pc, #412]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a64      	ldr	r2, [pc, #400]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fc02 	bl	8000d3c <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe fbfe 	bl	8000d3c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e14e      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002552:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ee      	beq.n	800253c <HAL_RCC_OscConfig+0x5f0>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe fbec 	bl	8000d3c <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe fbe8 	bl	8000d3c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e138      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800257e:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ee      	bne.n	8002568 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 812d 	beq.w	80027ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002594:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800259c:	2b18      	cmp	r3, #24
 800259e:	f000 80bd 	beq.w	800271c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	f040 809e 	bne.w	80026e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a41      	ldr	r2, [pc, #260]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80025b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fbc0 	bl	8000d3c <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe fbbc 	bl	8000d3c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e10e      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025d2:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80025e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025e2:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_RCC_OscConfig+0x774>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	430a      	orrs	r2, r1
 80025f2:	4931      	ldr	r1, [pc, #196]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	628b      	str	r3, [r1, #40]	; 0x28
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	3b01      	subs	r3, #1
 80025fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	3b01      	subs	r3, #1
 8002608:	025b      	lsls	r3, r3, #9
 800260a:	b29b      	uxth	r3, r3
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	3b01      	subs	r3, #1
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	3b01      	subs	r3, #1
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002628:	4923      	ldr	r1, [pc, #140]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800262a:	4313      	orrs	r3, r2
 800262c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	4a21      	ldr	r2, [pc, #132]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800263a:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800263c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_RCC_OscConfig+0x778>)
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002646:	00d2      	lsls	r2, r2, #3
 8002648:	491b      	ldr	r1, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f023 020c 	bic.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4917      	ldr	r1, [pc, #92]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800265c:	4313      	orrs	r3, r2
 800265e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f023 0202 	bic.w	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	4912      	ldr	r1, [pc, #72]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	4a10      	ldr	r2, [pc, #64]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002688:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002694:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_RCC_OscConfig+0x76c>)
 80026a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fb45 	bl	8000d3c <HAL_GetTick>
 80026b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026b4:	e011      	b.n	80026da <HAL_RCC_OscConfig+0x78e>
 80026b6:	bf00      	nop
 80026b8:	58024400 	.word	0x58024400
 80026bc:	58024800 	.word	0x58024800
 80026c0:	fffffc0c 	.word	0xfffffc0c
 80026c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fb38 	bl	8000d3c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e08a      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x77c>
 80026e6:	e082      	b.n	80027ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e8:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 80026ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fb22 	bl	8000d3c <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fb1e 	bl	8000d3c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e070      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800270e:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x7b0>
 800271a:	e068      	b.n	80027ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800271c:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002722:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b01      	cmp	r3, #1
 800272e:	d031      	beq.n	8002794 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d12a      	bne.n	8002794 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d122      	bne.n	8002794 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d11a      	bne.n	8002794 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0a5b      	lsrs	r3, r3, #9
 8002762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d111      	bne.n	8002794 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	0c1b      	lsrs	r3, r3, #16
 8002774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d108      	bne.n	8002794 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0e1b      	lsrs	r3, r3, #24
 8002786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e02b      	b.n	80027f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	08db      	lsrs	r3, r3, #3
 800279e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d01f      	beq.n	80027ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ba:	f7fe fabf 	bl	8000d3c <HAL_GetTick>
 80027be:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80027c0:	bf00      	nop
 80027c2:	f7fe fabb 	bl	8000d3c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d0f9      	beq.n	80027c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 80027d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_RCC_OscConfig+0x8b0>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027da:	00d2      	lsls	r2, r2, #3
 80027dc:	4906      	ldr	r1, [pc, #24]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_RCC_OscConfig+0x8ac>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3730      	adds	r7, #48	; 0x30
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	58024400 	.word	0x58024400
 80027fc:	ffff0007 	.word	0xffff0007

08002800 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e19c      	b.n	8002b4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b8a      	ldr	r3, [pc, #552]	; (8002a40 <HAL_RCC_ClockConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b87      	ldr	r3, [pc, #540]	; (8002a40 <HAL_RCC_ClockConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 020f 	bic.w	r2, r3, #15
 800282a:	4985      	ldr	r1, [pc, #532]	; (8002a40 <HAL_RCC_ClockConfig+0x240>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b83      	ldr	r3, [pc, #524]	; (8002a40 <HAL_RCC_ClockConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e184      	b.n	8002b4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d010      	beq.n	8002872 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	4b7b      	ldr	r3, [pc, #492]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800285c:	429a      	cmp	r2, r3
 800285e:	d908      	bls.n	8002872 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002860:	4b78      	ldr	r3, [pc, #480]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4975      	ldr	r1, [pc, #468]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 800286e:	4313      	orrs	r3, r2
 8002870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d010      	beq.n	80028a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800288a:	429a      	cmp	r2, r3
 800288c:	d908      	bls.n	80028a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800288e:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	496a      	ldr	r1, [pc, #424]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 800289c:	4313      	orrs	r3, r2
 800289e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d010      	beq.n	80028ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	4b64      	ldr	r3, [pc, #400]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d908      	bls.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028bc:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	495e      	ldr	r1, [pc, #376]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d010      	beq.n	80028fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	4b59      	ldr	r3, [pc, #356]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d908      	bls.n	80028fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028ea:	4b56      	ldr	r3, [pc, #344]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4953      	ldr	r1, [pc, #332]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d010      	beq.n	800292a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	429a      	cmp	r2, r3
 8002916:	d908      	bls.n	800292a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f023 020f 	bic.w	r2, r3, #15
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4947      	ldr	r1, [pc, #284]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002926:	4313      	orrs	r3, r2
 8002928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d055      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4940      	ldr	r1, [pc, #256]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002944:	4313      	orrs	r3, r2
 8002946:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d107      	bne.n	8002960 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002950:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d121      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0f6      	b.n	8002b4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d107      	bne.n	8002978 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d115      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0ea      	b.n	8002b4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0de      	b.n	8002b4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002990:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0d6      	b.n	8002b4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f023 0207 	bic.w	r2, r3, #7
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4925      	ldr	r1, [pc, #148]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b2:	f7fe f9c3 	bl	8000d3c <HAL_GetTick>
 80029b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ba:	f7fe f9bf 	bl	8000d3c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0be      	b.n	8002b4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d0:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	429a      	cmp	r2, r3
 80029e0:	d1eb      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d010      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d208      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f023 020f 	bic.w	r2, r3, #15
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	490e      	ldr	r1, [pc, #56]	; (8002a44 <HAL_RCC_ClockConfig+0x244>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_ClockConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d214      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_RCC_ClockConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 020f 	bic.w	r2, r3, #15
 8002a26:	4906      	ldr	r1, [pc, #24]	; (8002a40 <HAL_RCC_ClockConfig+0x240>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_RCC_ClockConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e086      	b.n	8002b4e <HAL_RCC_ClockConfig+0x34e>
 8002a40:	52002000 	.word	0x52002000
 8002a44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d010      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d208      	bcs.n	8002a76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a64:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	4939      	ldr	r1, [pc, #228]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d010      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d208      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	492e      	ldr	r1, [pc, #184]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d208      	bcs.n	8002ad2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ac0:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4922      	ldr	r1, [pc, #136]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d208      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4917      	ldr	r1, [pc, #92]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b00:	f000 f834 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	4912      	ldr	r1, [pc, #72]	; (8002b5c <HAL_RCC_ClockConfig+0x35c>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_RCC_ClockConfig+0x358>)
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	4a0d      	ldr	r2, [pc, #52]	; (8002b5c <HAL_RCC_ClockConfig+0x35c>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <HAL_RCC_ClockConfig+0x360>)
 8002b36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_RCC_ClockConfig+0x364>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_RCC_ClockConfig+0x368>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f8b0 	bl	8000ca8 <HAL_InitTick>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	08004614 	.word	0x08004614
 8002b60:	24000004 	.word	0x24000004
 8002b64:	24000000 	.word	0x24000000
 8002b68:	24000008 	.word	0x24000008

08002b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b72:	4bb3      	ldr	r3, [pc, #716]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b7a:	2b18      	cmp	r3, #24
 8002b7c:	f200 8155 	bhi.w	8002e2a <HAL_RCC_GetSysClockFreq+0x2be>
 8002b80:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b86:	bf00      	nop
 8002b88:	08002bed 	.word	0x08002bed
 8002b8c:	08002e2b 	.word	0x08002e2b
 8002b90:	08002e2b 	.word	0x08002e2b
 8002b94:	08002e2b 	.word	0x08002e2b
 8002b98:	08002e2b 	.word	0x08002e2b
 8002b9c:	08002e2b 	.word	0x08002e2b
 8002ba0:	08002e2b 	.word	0x08002e2b
 8002ba4:	08002e2b 	.word	0x08002e2b
 8002ba8:	08002c13 	.word	0x08002c13
 8002bac:	08002e2b 	.word	0x08002e2b
 8002bb0:	08002e2b 	.word	0x08002e2b
 8002bb4:	08002e2b 	.word	0x08002e2b
 8002bb8:	08002e2b 	.word	0x08002e2b
 8002bbc:	08002e2b 	.word	0x08002e2b
 8002bc0:	08002e2b 	.word	0x08002e2b
 8002bc4:	08002e2b 	.word	0x08002e2b
 8002bc8:	08002c19 	.word	0x08002c19
 8002bcc:	08002e2b 	.word	0x08002e2b
 8002bd0:	08002e2b 	.word	0x08002e2b
 8002bd4:	08002e2b 	.word	0x08002e2b
 8002bd8:	08002e2b 	.word	0x08002e2b
 8002bdc:	08002e2b 	.word	0x08002e2b
 8002be0:	08002e2b 	.word	0x08002e2b
 8002be4:	08002e2b 	.word	0x08002e2b
 8002be8:	08002c1f 	.word	0x08002c1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bec:	4b94      	ldr	r3, [pc, #592]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002bf8:	4b91      	ldr	r3, [pc, #580]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	4a90      	ldr	r2, [pc, #576]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
 8002c08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c0a:	e111      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c0c:	4b8d      	ldr	r3, [pc, #564]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c0e:	61bb      	str	r3, [r7, #24]
      break;
 8002c10:	e10e      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c12:	4b8d      	ldr	r3, [pc, #564]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c14:	61bb      	str	r3, [r7, #24]
      break;
 8002c16:	e10b      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c18:	4b8c      	ldr	r3, [pc, #560]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c1a:	61bb      	str	r3, [r7, #24]
      break;
 8002c1c:	e108      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c1e:	4b88      	ldr	r3, [pc, #544]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c28:	4b85      	ldr	r3, [pc, #532]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c34:	4b82      	ldr	r3, [pc, #520]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002c3e:	4b80      	ldr	r3, [pc, #512]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	08db      	lsrs	r3, r3, #3
 8002c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80e1 	beq.w	8002e24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	f000 8083 	beq.w	8002d70 <HAL_RCC_GetSysClockFreq+0x204>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	f200 80a1 	bhi.w	8002db4 <HAL_RCC_GetSysClockFreq+0x248>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x114>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d056      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c7e:	e099      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c80:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d02d      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c8c:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	4a6b      	ldr	r2, [pc, #428]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb6:	4b62      	ldr	r3, [pc, #392]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002ce6:	e087      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d2a:	e065      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d6e:	e043      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d82:	4b2f      	ldr	r3, [pc, #188]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002db2:	e021      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002df6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	0a5b      	lsrs	r3, r3, #9
 8002dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e02:	3301      	adds	r3, #1
 8002e04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e1c:	ee17 3a90 	vmov	r3, s15
 8002e20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e22:	e005      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61bb      	str	r3, [r7, #24]
      break;
 8002e28:	e002      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e2c:	61bb      	str	r3, [r7, #24]
      break;
 8002e2e:	bf00      	nop
  }

  return sysclockfreq;
 8002e30:	69bb      	ldr	r3, [r7, #24]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	58024400 	.word	0x58024400
 8002e44:	03d09000 	.word	0x03d09000
 8002e48:	003d0900 	.word	0x003d0900
 8002e4c:	017d7840 	.word	0x017d7840
 8002e50:	46000000 	.word	0x46000000
 8002e54:	4c742400 	.word	0x4c742400
 8002e58:	4a742400 	.word	0x4a742400
 8002e5c:	4bbebc20 	.word	0x4bbebc20

08002e60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b0ca      	sub	sp, #296	; 0x128
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002e84:	2500      	movs	r5, #0
 8002e86:	ea54 0305 	orrs.w	r3, r4, r5
 8002e8a:	d049      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e96:	d02f      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002e98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e9c:	d828      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ea2:	d01a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ea8:	d822      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb2:	d007      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eb4:	e01c      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb6:	4bb8      	ldr	r3, [pc, #736]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	4ab7      	ldr	r2, [pc, #732]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ec2:	e01a      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec8:	3308      	adds	r3, #8
 8002eca:	2102      	movs	r1, #2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 f9d1 	bl	8004274 <RCCEx_PLL2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ed8:	e00f      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ede:	3328      	adds	r3, #40	; 0x28
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 fa78 	bl	80043d8 <RCCEx_PLL3_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002eee:	e004      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ef6:	e000      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f02:	4ba5      	ldr	r3, [pc, #660]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f06:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f10:	4aa1      	ldr	r2, [pc, #644]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f12:	430b      	orrs	r3, r1
 8002f14:	6513      	str	r3, [r2, #80]	; 0x50
 8002f16:	e003      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002f2c:	f04f 0900 	mov.w	r9, #0
 8002f30:	ea58 0309 	orrs.w	r3, r8, r9
 8002f34:	d047      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d82a      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f5d 	.word	0x08002f5d
 8002f4c:	08002f6b 	.word	0x08002f6b
 8002f50:	08002f81 	.word	0x08002f81
 8002f54:	08002f9f 	.word	0x08002f9f
 8002f58:	08002f9f 	.word	0x08002f9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f5c:	4b8e      	ldr	r3, [pc, #568]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	4a8d      	ldr	r2, [pc, #564]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f68:	e01a      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f6e:	3308      	adds	r3, #8
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 f97e 	bl	8004274 <RCCEx_PLL2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f7e:	e00f      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f84:	3328      	adds	r3, #40	; 0x28
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fa25 	bl	80043d8 <RCCEx_PLL3_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f94:	e004      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fa8:	4b7b      	ldr	r3, [pc, #492]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fac:	f023 0107 	bic.w	r1, r3, #7
 8002fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	4a78      	ldr	r2, [pc, #480]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6513      	str	r3, [r2, #80]	; 0x50
 8002fbc:	e003      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002fd2:	f04f 0b00 	mov.w	fp, #0
 8002fd6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002fda:	d04c      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe6:	d030      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fec:	d829      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002fee:	2bc0      	cmp	r3, #192	; 0xc0
 8002ff0:	d02d      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ff4:	d825      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ff6:	2b80      	cmp	r3, #128	; 0x80
 8002ff8:	d018      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d821      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d007      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003006:	e01c      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003008:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	4a62      	ldr	r2, [pc, #392]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800300e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003014:	e01c      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800301a:	3308      	adds	r3, #8
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f928 	bl	8004274 <RCCEx_PLL2_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800302a:	e011      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003030:	3328      	adds	r3, #40	; 0x28
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f001 f9cf 	bl	80043d8 <RCCEx_PLL3_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003048:	e002      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800304e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003058:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800305a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	4a4c      	ldr	r2, [pc, #304]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003068:	430b      	orrs	r3, r1
 800306a:	6513      	str	r3, [r2, #80]	; 0x50
 800306c:	e003      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003072:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003082:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800308c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003090:	460b      	mov	r3, r1
 8003092:	4313      	orrs	r3, r2
 8003094:	d053      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800309a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800309e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030a2:	d035      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80030a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030a8:	d82e      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80030aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80030ae:	d031      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80030b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80030b4:	d828      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80030b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ba:	d01a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80030bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c0:	d822      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80030c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ca:	d007      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80030cc:	e01c      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ce:	4b32      	ldr	r3, [pc, #200]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	4a31      	ldr	r2, [pc, #196]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030da:	e01c      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e0:	3308      	adds	r3, #8
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 f8c5 	bl	8004274 <RCCEx_PLL2_Config>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80030f0:	e011      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f6:	3328      	adds	r3, #40	; 0x28
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 f96c 	bl	80043d8 <RCCEx_PLL3_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003106:	e006      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800310e:	e002      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800311e:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800312e:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003130:	430b      	orrs	r3, r1
 8003132:	6593      	str	r3, [r2, #88]	; 0x58
 8003134:	e003      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800313a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800314a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003154:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003158:	460b      	mov	r3, r1
 800315a:	4313      	orrs	r3, r2
 800315c:	d056      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003166:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800316a:	d038      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800316c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003170:	d831      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003176:	d034      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003178:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800317c:	d82b      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800317e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003182:	d01d      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003188:	d825      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800318e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003194:	e01f      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003196:	bf00      	nop
 8003198:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800319c:	4ba2      	ldr	r3, [pc, #648]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	4aa1      	ldr	r2, [pc, #644]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031a8:	e01c      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ae:	3308      	adds	r3, #8
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 f85e 	bl	8004274 <RCCEx_PLL2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80031be:	e011      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c4:	3328      	adds	r3, #40	; 0x28
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f001 f905 	bl	80043d8 <RCCEx_PLL3_Config>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031d4:	e006      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031dc:	e002      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80031e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80031ec:	4b8e      	ldr	r3, [pc, #568]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80031f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031fc:	4a8a      	ldr	r2, [pc, #552]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031fe:	430b      	orrs	r3, r1
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
 8003202:	e003      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003204:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003208:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800320c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003222:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003226:	460b      	mov	r3, r1
 8003228:	4313      	orrs	r3, r2
 800322a:	d03a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003232:	2b30      	cmp	r3, #48	; 0x30
 8003234:	d01f      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003236:	2b30      	cmp	r3, #48	; 0x30
 8003238:	d819      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800323a:	2b20      	cmp	r3, #32
 800323c:	d00c      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800323e:	2b20      	cmp	r3, #32
 8003240:	d815      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d019      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003246:	2b10      	cmp	r3, #16
 8003248:	d111      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800324a:	4b77      	ldr	r3, [pc, #476]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	4a76      	ldr	r2, [pc, #472]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003254:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003256:	e011      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800325c:	3308      	adds	r3, #8
 800325e:	2102      	movs	r1, #2
 8003260:	4618      	mov	r0, r3
 8003262:	f001 f807 	bl	8004274 <RCCEx_PLL2_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800326c:	e006      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003274:	e002      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800327a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003284:	4b68      	ldr	r3, [pc, #416]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003288:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	4a65      	ldr	r2, [pc, #404]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003294:	430b      	orrs	r3, r1
 8003296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800329e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80032a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80032ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80032b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80032bc:	460b      	mov	r3, r1
 80032be:	4313      	orrs	r3, r2
 80032c0:	d051      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032cc:	d035      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80032ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d2:	d82e      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80032d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032d8:	d031      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80032da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032de:	d828      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80032e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e4:	d01a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ea:	d822      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f4:	d007      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80032f6:	e01c      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f8:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003304:	e01c      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330a:	3308      	adds	r3, #8
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f000 ffb0 	bl	8004274 <RCCEx_PLL2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800331a:	e011      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003320:	3328      	adds	r3, #40	; 0x28
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f001 f857 	bl	80043d8 <RCCEx_PLL3_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003330:	e006      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003338:	e002      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800333a:	bf00      	nop
 800333c:	e000      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800333e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003340:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003348:	4b37      	ldr	r3, [pc, #220]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800334a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003356:	4a34      	ldr	r2, [pc, #208]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003358:	430b      	orrs	r3, r1
 800335a:	6513      	str	r3, [r2, #80]	; 0x50
 800335c:	e003      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003376:	2300      	movs	r3, #0
 8003378:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800337c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003380:	460b      	mov	r3, r1
 8003382:	4313      	orrs	r3, r2
 8003384:	d056      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003390:	d033      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003392:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003396:	d82c      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800339c:	d02f      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800339e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033a2:	d826      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80033a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033a8:	d02b      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80033aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033ae:	d820      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80033b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033b4:	d012      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80033b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ba:	d81a      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d022      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c4:	d115      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ca:	3308      	adds	r3, #8
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 ff50 	bl	8004274 <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80033da:	e015      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e0:	3328      	adds	r3, #40	; 0x28
 80033e2:	2101      	movs	r1, #1
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fff7 	bl	80043d8 <RCCEx_PLL3_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80033f0:	e00a      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033fa:	bf00      	nop
 80033fc:	e004      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341e:	4a02      	ldr	r2, [pc, #8]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003420:	430b      	orrs	r3, r1
 8003422:	6513      	str	r3, [r2, #80]	; 0x50
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003426:	bf00      	nop
 8003428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003430:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800344a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800344e:	460b      	mov	r3, r1
 8003450:	4313      	orrs	r3, r2
 8003452:	d055      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800345c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003460:	d033      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003466:	d82c      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d02f      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d826      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003474:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003478:	d02b      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800347a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800347e:	d820      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003484:	d012      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348a:	d81a      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d022      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003494:	d115      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800349a:	3308      	adds	r3, #8
 800349c:	2101      	movs	r1, #1
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fee8 	bl	8004274 <RCCEx_PLL2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80034aa:	e015      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b0:	3328      	adds	r3, #40	; 0x28
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 ff8f 	bl	80043d8 <RCCEx_PLL3_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80034c0:	e00a      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034c8:	e006      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80034ca:	bf00      	nop
 80034cc:	e004      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80034d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80034e0:	4ba3      	ldr	r3, [pc, #652]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80034e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034f0:	4a9f      	ldr	r2, [pc, #636]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6593      	str	r3, [r2, #88]	; 0x58
 80034f6:	e003      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800350c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003516:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800351a:	460b      	mov	r3, r1
 800351c:	4313      	orrs	r3, r2
 800351e:	d037      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352a:	d00e      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800352c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003530:	d816      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d018      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353a:	d111      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800353c:	4b8c      	ldr	r3, [pc, #560]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	4a8b      	ldr	r2, [pc, #556]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003548:	e00f      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354e:	3308      	adds	r3, #8
 8003550:	2101      	movs	r1, #1
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fe8e 	bl	8004274 <RCCEx_PLL2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800355e:	e004      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003572:	4b7f      	ldr	r3, [pc, #508]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003576:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a7b      	ldr	r2, [pc, #492]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003582:	430b      	orrs	r3, r1
 8003584:	6513      	str	r3, [r2, #80]	; 0x50
 8003586:	e003      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800358c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800359c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035a0:	2300      	movs	r3, #0
 80035a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80035a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4313      	orrs	r3, r2
 80035ae:	d039      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d81c      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80035ba:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80035bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c0:	080035fd 	.word	0x080035fd
 80035c4:	080035d1 	.word	0x080035d1
 80035c8:	080035df 	.word	0x080035df
 80035cc:	080035fd 	.word	0x080035fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d0:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	4a66      	ldr	r2, [pc, #408]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80035dc:	e00f      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e2:	3308      	adds	r3, #8
 80035e4:	2102      	movs	r1, #2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fe44 	bl	8004274 <RCCEx_PLL2_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80035f2:	e004      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035fa:	e000      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80035fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003606:	4b5a      	ldr	r3, [pc, #360]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	f023 0103 	bic.w	r1, r3, #3
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	4a56      	ldr	r2, [pc, #344]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003616:	430b      	orrs	r3, r1
 8003618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800361a:	e003      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003620:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003630:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800363a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800363e:	460b      	mov	r3, r1
 8003640:	4313      	orrs	r3, r2
 8003642:	f000 809f 	beq.w	8003784 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003646:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a4a      	ldr	r2, [pc, #296]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003652:	f7fd fb73 	bl	8000d3c <HAL_GetTick>
 8003656:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800365a:	e00b      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7fd fb6e 	bl	8000d3c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b64      	cmp	r3, #100	; 0x64
 800366a:	d903      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003672:	e005      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003674:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ed      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003684:	2b00      	cmp	r3, #0
 8003686:	d179      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003688:	4b39      	ldr	r3, [pc, #228]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800368a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003690:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003694:	4053      	eors	r3, r2
 8003696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369a:	2b00      	cmp	r3, #0
 800369c:	d015      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800369e:	4b34      	ldr	r3, [pc, #208]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a30      	ldr	r2, [pc, #192]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a2d      	ldr	r2, [pc, #180]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80036c2:	4a2b      	ldr	r2, [pc, #172]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d6:	d118      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fd fb30 	bl	8000d3c <HAL_GetTick>
 80036dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036e0:	e00d      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fd fb2b 	bl	8000d3c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036ec:	1ad2      	subs	r2, r2, r3
 80036ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d903      	bls.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80036fc:	e005      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0eb      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800370a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800370e:	2b00      	cmp	r3, #0
 8003710:	d129      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003716:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003722:	d10e      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003730:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003734:	091a      	lsrs	r2, r3, #4
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003738:	4013      	ands	r3, r2
 800373a:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800373c:	430b      	orrs	r3, r1
 800373e:	6113      	str	r3, [r2, #16]
 8003740:	e005      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003748:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800374c:	6113      	str	r3, [r2, #16]
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003750:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003756:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800375a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375e:	4a04      	ldr	r2, [pc, #16]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003760:	430b      	orrs	r3, r1
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
 8003764:	e00e      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800376a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800376e:	e009      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003770:	58024400 	.word	0x58024400
 8003774:	58024800 	.word	0x58024800
 8003778:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f002 0301 	and.w	r3, r2, #1
 8003790:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800379a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800379e:	460b      	mov	r3, r1
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f000 8089 	beq.w	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ac:	2b28      	cmp	r3, #40	; 0x28
 80037ae:	d86b      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80037b0:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	08003891 	.word	0x08003891
 80037bc:	08003889 	.word	0x08003889
 80037c0:	08003889 	.word	0x08003889
 80037c4:	08003889 	.word	0x08003889
 80037c8:	08003889 	.word	0x08003889
 80037cc:	08003889 	.word	0x08003889
 80037d0:	08003889 	.word	0x08003889
 80037d4:	08003889 	.word	0x08003889
 80037d8:	0800385d 	.word	0x0800385d
 80037dc:	08003889 	.word	0x08003889
 80037e0:	08003889 	.word	0x08003889
 80037e4:	08003889 	.word	0x08003889
 80037e8:	08003889 	.word	0x08003889
 80037ec:	08003889 	.word	0x08003889
 80037f0:	08003889 	.word	0x08003889
 80037f4:	08003889 	.word	0x08003889
 80037f8:	08003873 	.word	0x08003873
 80037fc:	08003889 	.word	0x08003889
 8003800:	08003889 	.word	0x08003889
 8003804:	08003889 	.word	0x08003889
 8003808:	08003889 	.word	0x08003889
 800380c:	08003889 	.word	0x08003889
 8003810:	08003889 	.word	0x08003889
 8003814:	08003889 	.word	0x08003889
 8003818:	08003891 	.word	0x08003891
 800381c:	08003889 	.word	0x08003889
 8003820:	08003889 	.word	0x08003889
 8003824:	08003889 	.word	0x08003889
 8003828:	08003889 	.word	0x08003889
 800382c:	08003889 	.word	0x08003889
 8003830:	08003889 	.word	0x08003889
 8003834:	08003889 	.word	0x08003889
 8003838:	08003891 	.word	0x08003891
 800383c:	08003889 	.word	0x08003889
 8003840:	08003889 	.word	0x08003889
 8003844:	08003889 	.word	0x08003889
 8003848:	08003889 	.word	0x08003889
 800384c:	08003889 	.word	0x08003889
 8003850:	08003889 	.word	0x08003889
 8003854:	08003889 	.word	0x08003889
 8003858:	08003891 	.word	0x08003891
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003860:	3308      	adds	r3, #8
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fd05 	bl	8004274 <RCCEx_PLL2_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003870:	e00f      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003876:	3328      	adds	r3, #40	; 0x28
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fdac 	bl	80043d8 <RCCEx_PLL3_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003886:	e004      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800388e:	e000      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800389a:	4bbf      	ldr	r3, [pc, #764]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a8:	4abb      	ldr	r2, [pc, #748]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038aa:	430b      	orrs	r3, r1
 80038ac:	6553      	str	r3, [r2, #84]	; 0x54
 80038ae:	e003      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f002 0302 	and.w	r3, r2, #2
 80038c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80038ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80038d2:	460b      	mov	r3, r1
 80038d4:	4313      	orrs	r3, r2
 80038d6:	d041      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d824      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	08003935 	.word	0x08003935
 80038ec:	08003901 	.word	0x08003901
 80038f0:	08003917 	.word	0x08003917
 80038f4:	08003935 	.word	0x08003935
 80038f8:	08003935 	.word	0x08003935
 80038fc:	08003935 	.word	0x08003935
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003904:	3308      	adds	r3, #8
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fcb3 	bl	8004274 <RCCEx_PLL2_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003914:	e00f      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391a:	3328      	adds	r3, #40	; 0x28
 800391c:	2101      	movs	r1, #1
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fd5a 	bl	80043d8 <RCCEx_PLL3_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800392a:	e004      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800393e:	4b96      	ldr	r3, [pc, #600]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	f023 0107 	bic.w	r1, r3, #7
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800394c:	4a92      	ldr	r2, [pc, #584]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800394e:	430b      	orrs	r3, r1
 8003950:	6553      	str	r3, [r2, #84]	; 0x54
 8003952:	e003      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003958:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f002 0304 	and.w	r3, r2, #4
 8003968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003972:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d044      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003984:	2b05      	cmp	r3, #5
 8003986:	d825      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039dd 	.word	0x080039dd
 8003994:	080039a9 	.word	0x080039a9
 8003998:	080039bf 	.word	0x080039bf
 800399c:	080039dd 	.word	0x080039dd
 80039a0:	080039dd 	.word	0x080039dd
 80039a4:	080039dd 	.word	0x080039dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ac:	3308      	adds	r3, #8
 80039ae:	2101      	movs	r1, #1
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fc5f 	bl	8004274 <RCCEx_PLL2_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c2:	3328      	adds	r3, #40	; 0x28
 80039c4:	2101      	movs	r1, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fd06 	bl	80043d8 <RCCEx_PLL3_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e6:	4b6c      	ldr	r3, [pc, #432]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f023 0107 	bic.w	r1, r3, #7
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f6:	4a68      	ldr	r2, [pc, #416]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6593      	str	r3, [r2, #88]	; 0x58
 80039fc:	e003      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f002 0320 	and.w	r3, r2, #32
 8003a12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a20:	460b      	mov	r3, r1
 8003a22:	4313      	orrs	r3, r2
 8003a24:	d055      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a32:	d033      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a38:	d82c      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d02f      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a44:	d826      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a4a:	d02b      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003a4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a50:	d820      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a56:	d012      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5c:	d81a      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d022      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a66:	d115      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fbff 	bl	8004274 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e015      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	3328      	adds	r3, #40	; 0x28
 8003a84:	2102      	movs	r1, #2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fca6 	bl	80043d8 <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a92:	e00a      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a9a:	e006      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a9c:	bf00      	nop
 8003a9e:	e004      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003aa0:	bf00      	nop
 8003aa2:	e002      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003aa4:	bf00      	nop
 8003aa6:	e000      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ab2:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	4a35      	ldr	r2, [pc, #212]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6553      	str	r3, [r2, #84]	; 0x54
 8003ac8:	e003      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ae8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	d058      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003afa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003afe:	d033      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003b00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b04:	d82c      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	d02f      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b10:	d826      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b16:	d02b      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003b18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b1c:	d820      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b22:	d012      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b28:	d81a      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d022      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d115      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b38:	3308      	adds	r3, #8
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fb99 	bl	8004274 <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b48:	e015      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4e:	3328      	adds	r3, #40	; 0x28
 8003b50:	2102      	movs	r1, #2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fc40 	bl	80043d8 <RCCEx_PLL3_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b66:	e006      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b68:	bf00      	nop
 8003b6a:	e004      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b6c:	bf00      	nop
 8003b6e:	e002      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b70:	bf00      	nop
 8003b72:	e000      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10e      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b8e:	4a02      	ldr	r2, [pc, #8]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6593      	str	r3, [r2, #88]	; 0x58
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003b96:	bf00      	nop
 8003b98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	d055      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bd0:	d033      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003bd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bd6:	d82c      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bdc:	d02f      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be2:	d826      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003be4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003be8:	d02b      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003bea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bee:	d820      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bf4:	d012      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bfa:	d81a      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d022      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c04:	d115      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fb30 	bl	8004274 <RCCEx_PLL2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c1a:	e015      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c20:	3328      	adds	r3, #40	; 0x28
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fbd7 	bl	80043d8 <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c30:	e00a      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c38:	e006      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c3a:	bf00      	nop
 8003c3c:	e004      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10b      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c50:	4ba1      	ldr	r3, [pc, #644]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c60:	4a9d      	ldr	r2, [pc, #628]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6593      	str	r3, [r2, #88]	; 0x58
 8003c66:	e003      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f002 0308 	and.w	r3, r2, #8
 8003c7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	d01e      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca2:	3328      	adds	r3, #40	; 0x28
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fb96 	bl	80043d8 <RCCEx_PLL3_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003cb8:	4b87      	ldr	r3, [pc, #540]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc8:	4a83      	ldr	r2, [pc, #524]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f002 0310 	and.w	r3, r2, #16
 8003cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ce4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4313      	orrs	r3, r2
 8003cec:	d01e      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfa:	d10c      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d00:	3328      	adds	r3, #40	; 0x28
 8003d02:	2102      	movs	r1, #2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fb67 	bl	80043d8 <RCCEx_PLL3_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d16:	4b70      	ldr	r3, [pc, #448]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d26:	4a6c      	ldr	r2, [pc, #432]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003d46:	460b      	mov	r3, r1
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	d03e      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d58:	d022      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003d5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d5e:	d81b      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d68:	d00b      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003d6a:	e015      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d70:	3308      	adds	r3, #8
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fa7d 	bl	8004274 <RCCEx_PLL2_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d80:	e00f      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d86:	3328      	adds	r3, #40	; 0x28
 8003d88:	2102      	movs	r1, #2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fb24 	bl	80043d8 <RCCEx_PLL3_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d96:	e004      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d9e:	e000      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003daa:	4b4b      	ldr	r3, [pc, #300]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dba:	4a47      	ldr	r2, [pc, #284]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc0:	e003      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003dd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dd8:	2300      	movs	r3, #0
 8003dda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ddc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d03b      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003df2:	d01f      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003df4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003df8:	d818      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfe:	d003      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003e00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e04:	d007      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003e06:	e011      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e08:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	4a32      	ldr	r2, [pc, #200]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e14:	e00f      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1a:	3328      	adds	r3, #40	; 0x28
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fada 	bl	80043d8 <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e2a:	e004      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e3e:	4b26      	ldr	r3, [pc, #152]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6553      	str	r3, [r2, #84]	; 0x54
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	677b      	str	r3, [r7, #116]	; 0x74
 8003e70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003e74:	460b      	mov	r3, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	d034      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e88:	d007      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003e8a:	e011      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e98:	e00e      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f9e6 	bl	8004274 <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003eae:	e003      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10d      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	4a02      	ldr	r2, [pc, #8]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ed4:	e006      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003ed6:	bf00      	nop
 8003ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ee0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003ef0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ef6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003efa:	460b      	mov	r3, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	d00c      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f04:	3328      	adds	r3, #40	; 0x28
 8003f06:	2102      	movs	r1, #2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fa65 	bl	80043d8 <RCCEx_PLL3_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003f26:	663b      	str	r3, [r7, #96]	; 0x60
 8003f28:	2300      	movs	r3, #0
 8003f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d038      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f42:	d018      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f48:	d811      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4e:	d014      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f54:	d80b      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d011      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f60:	4bc3      	ldr	r3, [pc, #780]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	4ac2      	ldr	r2, [pc, #776]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f6c:	e008      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f74:	e004      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f88:	4bb9      	ldr	r3, [pc, #740]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f98:	4ab5      	ldr	r2, [pc, #724]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	6553      	str	r3, [r2, #84]	; 0x54
 8003f9e:	e003      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003fb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fc4:	4baa      	ldr	r3, [pc, #680]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd2:	4aa7      	ldr	r2, [pc, #668]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	657b      	str	r3, [r7, #84]	; 0x54
 8003fea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ff4:	4b9e      	ldr	r3, [pc, #632]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004000:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004004:	4a9a      	ldr	r2, [pc, #616]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004006:	430b      	orrs	r3, r1
 8004008:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004016:	64bb      	str	r3, [r7, #72]	; 0x48
 8004018:	2300      	movs	r3, #0
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004020:	460b      	mov	r3, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004026:	4b92      	ldr	r3, [pc, #584]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004034:	4a8e      	ldr	r2, [pc, #568]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004036:	430b      	orrs	r3, r1
 8004038:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004046:	643b      	str	r3, [r7, #64]	; 0x40
 8004048:	2300      	movs	r3, #0
 800404a:	647b      	str	r3, [r7, #68]	; 0x44
 800404c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004050:	460b      	mov	r3, r1
 8004052:	4313      	orrs	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004056:	4b86      	ldr	r3, [pc, #536]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	4a85      	ldr	r2, [pc, #532]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800405c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004060:	6113      	str	r3, [r2, #16]
 8004062:	4b83      	ldr	r3, [pc, #524]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004064:	6919      	ldr	r1, [r3, #16]
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800406e:	4a80      	ldr	r2, [pc, #512]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004070:	430b      	orrs	r3, r1
 8004072:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
 8004082:	2300      	movs	r3, #0
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004086:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004090:	4b77      	ldr	r3, [pc, #476]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004094:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	4a74      	ldr	r2, [pc, #464]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040a0:	430b      	orrs	r3, r1
 80040a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
 80040b2:	2300      	movs	r3, #0
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
 80040b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80040ba:	460b      	mov	r3, r1
 80040bc:	4313      	orrs	r3, r2
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040c0:	4b6b      	ldr	r3, [pc, #428]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d0:	4a67      	ldr	r2, [pc, #412]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040d2:	430b      	orrs	r3, r1
 80040d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	2100      	movs	r1, #0
 80040e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80040ec:	460b      	mov	r3, r1
 80040ee:	4313      	orrs	r3, r2
 80040f0:	d011      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f6:	3308      	adds	r3, #8
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f8ba 	bl	8004274 <RCCEx_PLL2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004112:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	2100      	movs	r1, #0
 8004120:	6239      	str	r1, [r7, #32]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
 8004128:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800412c:	460b      	mov	r3, r1
 800412e:	4313      	orrs	r3, r2
 8004130:	d011      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004136:	3308      	adds	r3, #8
 8004138:	2101      	movs	r1, #1
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f89a 	bl	8004274 <RCCEx_PLL2_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	2100      	movs	r1, #0
 8004160:	61b9      	str	r1, [r7, #24]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d011      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004176:	3308      	adds	r3, #8
 8004178:	2102      	movs	r1, #2
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f87a 	bl	8004274 <RCCEx_PLL2_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004192:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	2100      	movs	r1, #0
 80041a0:	6139      	str	r1, [r7, #16]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80041ac:	460b      	mov	r3, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	d011      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b6:	3328      	adds	r3, #40	; 0x28
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f90c 	bl	80043d8 <RCCEx_PLL3_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80041c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	2100      	movs	r1, #0
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041ec:	460b      	mov	r3, r1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	d011      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f6:	3328      	adds	r3, #40	; 0x28
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f8ec 	bl	80043d8 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	2100      	movs	r1, #0
 8004220:	6039      	str	r1, [r7, #0]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	e9d7 1200 	ldrd	r1, r2, [r7]
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d011      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004236:	3328      	adds	r3, #40	; 0x28
 8004238:	2102      	movs	r1, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f8cc 	bl	80043d8 <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004252:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004256:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
}
 8004264:	4618      	mov	r0, r3
 8004266:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800426a:	46bd      	mov	sp, r7
 800426c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004270:	58024400 	.word	0x58024400

08004274 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004282:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b03      	cmp	r3, #3
 800428c:	d101      	bne.n	8004292 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e099      	b.n	80043c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004292:	4b4f      	ldr	r3, [pc, #316]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a4e      	ldr	r2, [pc, #312]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004298:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800429c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429e:	f7fc fd4d 	bl	8000d3c <HAL_GetTick>
 80042a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042a4:	e008      	b.n	80042b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042a6:	f7fc fd49 	bl	8000d3c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e086      	b.n	80043c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042b8:	4b45      	ldr	r3, [pc, #276]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042c4:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	493f      	ldr	r1, [pc, #252]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	628b      	str	r3, [r1, #40]	; 0x28
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	3b01      	subs	r3, #1
 80042de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	025b      	lsls	r3, r3, #9
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	3b01      	subs	r3, #1
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004308:	4931      	ldr	r1, [pc, #196]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800430e:	4b30      	ldr	r3, [pc, #192]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	492d      	ldr	r1, [pc, #180]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004320:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	f023 0220 	bic.w	r2, r3, #32
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	4928      	ldr	r1, [pc, #160]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800432e:	4313      	orrs	r3, r2
 8004330:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004332:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004338:	f023 0310 	bic.w	r3, r3, #16
 800433c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <RCCEx_PLL2_Config+0x160>)
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	69d2      	ldr	r2, [r2, #28]
 800434a:	00d2      	lsls	r2, r2, #3
 800434c:	4920      	ldr	r1, [pc, #128]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004352:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004358:	f043 0310 	orr.w	r3, r3, #16
 800435c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004364:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800436a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800436e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004370:	e00f      	b.n	8004392 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d106      	bne.n	8004386 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800437e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004382:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004384:	e005      	b.n	8004392 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004386:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	4a11      	ldr	r2, [pc, #68]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800438c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004390:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004398:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800439c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800439e:	f7fc fccd 	bl	8000d3c <HAL_GetTick>
 80043a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043a4:	e008      	b.n	80043b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043a6:	f7fc fcc9 	bl	8000d3c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e006      	b.n	80043c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <RCCEx_PLL2_Config+0x15c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	58024400 	.word	0x58024400
 80043d4:	ffff0007 	.word	0xffff0007

080043d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043e6:	4b53      	ldr	r3, [pc, #332]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d101      	bne.n	80043f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e099      	b.n	800452a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043f6:	4b4f      	ldr	r3, [pc, #316]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a4e      	ldr	r2, [pc, #312]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80043fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004402:	f7fc fc9b 	bl	8000d3c <HAL_GetTick>
 8004406:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004408:	e008      	b.n	800441c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800440a:	f7fc fc97 	bl	8000d3c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e086      	b.n	800452a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800441c:	4b45      	ldr	r3, [pc, #276]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004428:	4b42      	ldr	r3, [pc, #264]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	051b      	lsls	r3, r3, #20
 8004436:	493f      	ldr	r1, [pc, #252]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	628b      	str	r3, [r1, #40]	; 0x28
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	3b01      	subs	r3, #1
 8004442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	3b01      	subs	r3, #1
 800444c:	025b      	lsls	r3, r3, #9
 800444e:	b29b      	uxth	r3, r3
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	3b01      	subs	r3, #1
 8004466:	061b      	lsls	r3, r3, #24
 8004468:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800446c:	4931      	ldr	r1, [pc, #196]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004472:	4b30      	ldr	r3, [pc, #192]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	492d      	ldr	r1, [pc, #180]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004480:	4313      	orrs	r3, r2
 8004482:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	4928      	ldr	r1, [pc, #160]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004492:	4313      	orrs	r3, r2
 8004494:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004496:	4b27      	ldr	r3, [pc, #156]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	4a26      	ldr	r2, [pc, #152]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 800449c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044a2:	4b24      	ldr	r3, [pc, #144]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <RCCEx_PLL3_Config+0x160>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	69d2      	ldr	r2, [r2, #28]
 80044ae:	00d2      	lsls	r2, r2, #3
 80044b0:	4920      	ldr	r1, [pc, #128]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044b6:	4b1f      	ldr	r3, [pc, #124]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	4a19      	ldr	r2, [pc, #100]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044d4:	e00f      	b.n	80044f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d106      	bne.n	80044ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044dc:	4b15      	ldr	r3, [pc, #84]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	4a14      	ldr	r2, [pc, #80]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044e8:	e005      	b.n	80044f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	4a11      	ldr	r2, [pc, #68]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004502:	f7fc fc1b 	bl	8000d3c <HAL_GetTick>
 8004506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004508:	e008      	b.n	800451c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800450a:	f7fc fc17 	bl	8000d3c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e006      	b.n	800452a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <RCCEx_PLL3_Config+0x15c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	58024400 	.word	0x58024400
 8004538:	ffff0007 	.word	0xffff0007

0800453c <memset>:
 800453c:	4402      	add	r2, r0
 800453e:	4603      	mov	r3, r0
 8004540:	4293      	cmp	r3, r2
 8004542:	d100      	bne.n	8004546 <memset+0xa>
 8004544:	4770      	bx	lr
 8004546:	f803 1b01 	strb.w	r1, [r3], #1
 800454a:	e7f9      	b.n	8004540 <memset+0x4>

0800454c <__libc_init_array>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	4d0d      	ldr	r5, [pc, #52]	; (8004584 <__libc_init_array+0x38>)
 8004550:	4c0d      	ldr	r4, [pc, #52]	; (8004588 <__libc_init_array+0x3c>)
 8004552:	1b64      	subs	r4, r4, r5
 8004554:	10a4      	asrs	r4, r4, #2
 8004556:	2600      	movs	r6, #0
 8004558:	42a6      	cmp	r6, r4
 800455a:	d109      	bne.n	8004570 <__libc_init_array+0x24>
 800455c:	4d0b      	ldr	r5, [pc, #44]	; (800458c <__libc_init_array+0x40>)
 800455e:	4c0c      	ldr	r4, [pc, #48]	; (8004590 <__libc_init_array+0x44>)
 8004560:	f000 f826 	bl	80045b0 <_init>
 8004564:	1b64      	subs	r4, r4, r5
 8004566:	10a4      	asrs	r4, r4, #2
 8004568:	2600      	movs	r6, #0
 800456a:	42a6      	cmp	r6, r4
 800456c:	d105      	bne.n	800457a <__libc_init_array+0x2e>
 800456e:	bd70      	pop	{r4, r5, r6, pc}
 8004570:	f855 3b04 	ldr.w	r3, [r5], #4
 8004574:	4798      	blx	r3
 8004576:	3601      	adds	r6, #1
 8004578:	e7ee      	b.n	8004558 <__libc_init_array+0xc>
 800457a:	f855 3b04 	ldr.w	r3, [r5], #4
 800457e:	4798      	blx	r3
 8004580:	3601      	adds	r6, #1
 8004582:	e7f2      	b.n	800456a <__libc_init_array+0x1e>
 8004584:	08004634 	.word	0x08004634
 8004588:	08004634 	.word	0x08004634
 800458c:	08004634 	.word	0x08004634
 8004590:	08004638 	.word	0x08004638

08004594 <memcpy>:
 8004594:	440a      	add	r2, r1
 8004596:	4291      	cmp	r1, r2
 8004598:	f100 33ff 	add.w	r3, r0, #4294967295
 800459c:	d100      	bne.n	80045a0 <memcpy+0xc>
 800459e:	4770      	bx	lr
 80045a0:	b510      	push	{r4, lr}
 80045a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045aa:	4291      	cmp	r1, r2
 80045ac:	d1f9      	bne.n	80045a2 <memcpy+0xe>
 80045ae:	bd10      	pop	{r4, pc}

080045b0 <_init>:
 80045b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b2:	bf00      	nop
 80045b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b6:	bc08      	pop	{r3}
 80045b8:	469e      	mov	lr, r3
 80045ba:	4770      	bx	lr

080045bc <_fini>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	bf00      	nop
 80045c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c2:	bc08      	pop	{r3}
 80045c4:	469e      	mov	lr, r3
 80045c6:	4770      	bx	lr
